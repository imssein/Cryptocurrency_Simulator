package com.project.cs.cryptocurrency.feignclient;

import lombok.Getter;

@Getter
public enum Market {
    비트코인("Bitcoin", "KRW-BTC"),
    이더리움("Ethereum", "KRW-ETH"),
    네오("NEO", "KRW-NEO"),
    메탈("Metal", "KRW-MTL"),
    리플("Ripple", "KRW-XRP"),
    이더리움클래식("Ethereum Classic", "KRW-ETC"),
    오미세고("OmiseGo", "KRW-OMG"),
    스테이터스네트워크토큰("Status Network Token", "KRW-SNT"),
    웨이브("Waves", "KRW-WAVES"),
    넴("NEM", "KRW-XEM"),
    퀀텀("Qtum", "KRW-QTUM"),
    리스크("Lisk", "KRW-LSK"),
    스팀("Steem", "KRW-STEEM"),
    스텔라루멘("Lumen", "KRW-XLM"),
    아더("Ardor", "KRW-ARDR"),
    아크("Ark", "KRW-ARK"),
    스토리지("Storj", "KRW-STORJ"),
    그로스톨코인("Groestlcoin", "KRW-GRS"),
    어거("Augur", "KRW-REP"),
    에이다("Ada", "KRW-ADA"),
    스팀달러("SteemDollars", "KRW-SBD"),
    파워렛저("Power ledger", "KRW-POWR"),
    비트코인골드("Bitcoin Gold", "KRW-BTG"),
    아이콘("Icon", "KRW-ICX"),
    이오스("EOS", "KRW-EOS"),
    트론("TRON", "KRW-TRX"),
    시아코인("Siacoin", "KRW-SC"),
    온톨로지("Ontology", "KRW-ONT"),
    질리카("Zilliqa", "KRW-ZIL"),
    폴리매쓰("Polymath", "KRW-POLY"),
    제로엑스("0x Protocol", "KRW-ZRX"),
    룸네트워크("Loom Network", "KRW-LOOM"),
    비트코인캐시("Bitcoin Cash", "KRW-BCH"),
    베이직어텐션토큰("Basic Attention Token", "KRW-BAT"),
    아이오에스티("IOST", "KRW-IOST"),
    리퍼리움("Refereum", "KRW-RFR"),
    시빅("Civic", "KRW-CVC"),
    에브리피디아("Everipedia", "KRW-IQ"),
    아이오타("IOTA", "KRW-IOTA"),
    메인프레임("Mainframe", "KRW-MFT"),
    온톨로지가스("ONG", "KRW-ONG"),
    가스("GAS", "KRW-GAS"),
    센티넬프로토콜("Sentinel Protocol", "KRW-UPP"),
    엘프("aelf", "KRW-ELF"),
    카이버네트워크("Kyber Network", "KRW-KNC"),
    비트코인에스브이("Bitcoin SV", "KRW-BSV"),
    쎄타토큰("Theta Token", "KRW-THETA"),
    쿼크체인("QuarkChain", "KRW-QKC"),
    비트토렌트("BitTorrent", "KRW-BTT"),
    모스코인("Moss Coin", "KRW-MOC"),
    엔진코인("Enjin", "KRW-ENJ"),
    쎄타퓨엘("Theta Fuel", "KRW-TFUEL"),
    디센트럴랜드("Decentraland", "KRW-MANA"),
    앵커("Ankr", "KRW-ANKR"),
    아르고("Aergo", "KRW-AERGO"),
    코스모스("Cosmos", "KRW-ATOM"),
    썬더코어("ThunderCore", "KRW-TT"),
    캐리프로토콜("Carry Protocol", "KRW-CRE"),
    무비블록("MovieBloc", "KRW-MBL"),
    왁스("WAX", "KRW-WAXP"),
    헤데라("Hedera", "KRW-HBAR"),
    메디블록("MediBloc", "KRW-MED"),
    밀크("MiL.k", "KRW-MLK"),
    에스티피("Standard Tokenization Protocol", "KRW-STPT"),
    오브스("Orbs", "KRW-ORBS"),
    비체인("VeChain", "KRW-VET"),
    칠리즈("Chiliz", "KRW-CHZ"),
    스톰엑스("StormX", "KRW-STMX"),
    디카르고("dKargo", "KRW-DKA"),
    하이브("Hive", "KRW-HIVE"),
    카바("Kava", "KRW-KAVA"),
    아하토큰("AhaToken", "KRW-AHT"),
    체인링크("Chainlink", "KRW-LINK"),
    테조스("Tezos", "KRW-XTZ"),
    보라("BORA", "KRW-BORA"),
    저스트("JUST", "KRW-JST"),
    크로노스("Cronos", "KRW-CRO"),
    톤("TON", "KRW-TON"),
    솔라("SXP", "KRW-SXP"),
    헌트("HUNT", "KRW-HUNT"),
    플레이댑("PlayDapp", "KRW-PLA"),
    폴카닷("Polkadot", "KRW-DOT"),
    세럼("Serum", "KRW-SRM"),
    엠블("MVL", "KRW-MVL"),
    스트라티스("Stratis", "KRW-STRAX"),
    알파쿼크("Alpha Quark Token", "KRW-AQT"),
    골렘("Golem", "KRW-GLM"),
    썸씽("SOMESING", "KRW-SSX"),
    메타디움("Metadium", "KRW-META"),
    피르마체인("FirmaChain", "KRW-FCT2"),
    코박토큰("Cobak Token", "KRW-CBK"),
    샌드박스("The Sandbox", "KRW-SAND"),
    휴먼스케이프("Humanscape", "KRW-HUM"),
    도지코인("Dogecoin", "KRW-DOGE"),
    스트라이크("Strike", "KRW-STRK"),
    펀디엑스("Pundi X", "KRW-PUNDIX"),
    플로우("Flow", "KRW-FLOW"),
    던프로토콜("Dawn Protocol", "KRW-DAWN"),
    엑시인피니티("Axie Infinity", "KRW-AXS"),
    스택스("Stacks", "KRW-STX"),
    이캐시("eCash", "KRW-XEC"),
    솔라나("Solana", "KRW-SOL"),
    폴리곤("Polygon", "KRW-MATIC"),
    누사이퍼("Nucypher", "KRW-NU"),
    에이브("Aave", "KRW-AAVE"),
    일인치네트워크("1inch Network", "KRW-1INCH"),
    알고랜드("Algorand", "KRW-ALGO"),
    니어프로토콜("NEAR Protocol", "KRW-NEAR"),
    위믹스("Wemix", "KRW-WEMIX"),
    아발란체("Avalanche", "KRW-AVAX"),
    쓰레스홀드("Threshold", "KRW-T"),
    셀로("Celo", "KRW-CELO"),
    스테픈("Stepn", "KRW-GMT");

    private String english_name;
    private String marketCode;

    Market(String english_name, String marketCode) {
        this.english_name = english_name;
        this.marketCode = marketCode;
    }

    public static String getAllMarketCode(){
        String result = "";

        for(Market m : Market.values()){
            result += m.getMarketCode() + ",";
        }

        return result.substring(0, result.length() - 1);
    }
}
